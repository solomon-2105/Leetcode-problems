1) Assign cookies 

class Solution:
    def findContentChildren(self, g: List[int], s: List[int]) -> int:
        g.sort()
        s.sort()
        i,j=0,0
        count=0
        a,b=len(g),len(s)
        while i<a and j<b:
            if g[i]<=s[j]:
                i+=1
                j+=1
                count+=1
            else:
                j+=1
        return count 


2) maximum matching of players with trainors

class Solution:
    def matchPlayersAndTrainers(self, g: List[int], s: List[int]) -> int:
        g.sort()
        s.sort()
        i,j=0,0
        count=0
        a,b=len(g),len(s)
        while i<a and j<b:
            if g[i]<=s[j]:
                i+=1
                j+=1
                count+=1
            else:
                j+=1
        return count 


3) Lemonade change

class Solution:
    def lemonadeChange(self, bills: List[int]) -> bool:
        f,t=0,0
        for i in bills:
            if i==5: f+=1
            elif i==10:
                if not f: return False
                f-=1
                t+=1
            else:
                if f>0 and t>0:
                    t-=1
                    f-=1
                elif f>=3:
                    f-=3
                else : return False
        return True


4) Shortest Job First (CPU scheduling)

import heapq
class Solution:
    def solve(self, bt):
        # Code here 12347
        
        count=0
        brr=0
        n=len(bt)
        heapq.heapify(bt)
        while bt:
            i=heapq.heappop(bt)
            count+=brr
            brr+=i
        return count//n


5) Jump game - I

class Solution:
    def canJump(self, a: List[int]) -> bool:
        count=0
        for i in range(len(a)):
            if i>count: return False
            count=max(i+a[i],count)
            if count>=len(a)-1:return True


6) Jump game - II

























