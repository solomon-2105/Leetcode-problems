1)remove the outermost paranthesis (counter method)

s = "(()())(())"
ass=[]
count=0
for c in s:
    if c=="(":
        if count>0:
            ass.append(c)
        count+=1
    else:
        count-=1
        if count>0:
            ass.append(c)
print("".join(ass))


2)remove the outermost paranthesis (stack method)

class Solution:
    def removeOuterParentheses(self, s: str) -> str:
        stack=[]
        ass=""
        for c in s:
            if c=="(":
                if not stack:
                    stack.append(c)
                else:
                    stack.append(c)
                    ass+=c
            else:
                stack.pop()
                if stack: 
                    ass+=c
        return ass


3)reverse the words in a given string (two pointer method)

def reversee(brr,left,right):
    while left<=right:
        brr[left],brr[right]=brr[right],brr[left]
        left+=1
        right-=1

a=input().strip()
brr=list(a)
reversee(brr,0,len(brr)-1)
i,k=0,0
while k<len(brr):
    if brr[k]!=" ":
        k+=1
    else:
        reversee(brr,i,k-1)
        while k<len(brr) and brr[k]==" ":
            k+=1
        i=k
reversee(brr,i,len(brr)-1)
print("".join(brr))


4)reverse the words in a given string (pythonic way)

a=input().strip().split(" ")
brr=list(a)
print(brr)
brr.reverse()
print(" ".join(brr))


5)String to integer conversion 

class Solution:
    def myAtoi(self, s: str) -> int:
        if not s: return 0
        i=0
        while i<len(s) and s[i]==" ": i+=1
        if i==len(s): return 0
        brr=False
        if s[i]=="-":
            brr=True
            i+=1
        elif s[i]=="+":
            i+=1
        num=0
        while i<len(s) and s[i].isdigit():
            num=num*10+(ord(s[i])-ord('0'))
            i+=1
        if brr: num*=-1
        num=max(-2**31,min(2**31-1,num))
        return num


6)Integer to string conversion

a=int(input())
if a==0:
    print("0")
neg=False
if a<0:
    neg=True
    a*=-1
brr=[]
while a>0:
    brr.append(chr(ord('0')+a%10))
    a//=10
if neg:
    brr.append('-')
x="".join(reversed(brr))
print(x)
print(type(x))


7)largest odd number in a string

class Solution:
    def largestOddNumber(self, num: str) -> str:
        for i in range(len(num)-1,-1,-1):
            if (ord(num[i])-ord('0'))%2==1:
                return num[:i+1]
        return ""


8)Longest Common Prefix

class Solution:
    def longestCommonPrefix(self, a: List[str]) -> str:
        res = ""
        for i in range(len(a[0])):
            char = a[0][i]
            for j in range(1, len(a)):
                if i >= len(a[j]) or a[j][i] != char:
                    return res
            res += char
        return res


9)Isomorphic Strings

class Solution:
    def isIsomorphic(self, s: str, t: str) -> bool:
        a,b={},{}
        for i in range(len(s)):
            if (s[i] in a and a[s[i]]!=t[i]) or (t[i] in b and b[t[i]]!=s[i]):return False
            a[s[i]]=t[i]
            b[t[i]]=s[i]
        return True


10)check whether one string is a rotation of another

class Solution:
    def rotateString(self, s: str, goal: str) -> bool:
        if s==goal: return True
        for i in range(1,len(s)):
            if (s[i:]+s[:i])==goal: return True
        return False


11)anagram check of two strings

class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        if len(s)!=len(t): return False
        a={}
        for i in s:
            a[i]=a.get(i,0)+1
        for i in t:
            if i not in a or a[i]==0:
                return False
            a[i]-=1
        return True